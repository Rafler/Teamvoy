{"version":3,"sources":["components/PokemonsDetails/PokemonDetails.js","components/Card/Card.js","components/Cards/Cards.js","components/Header/Header.js","components/Header/index.js","components/App/App.js","api/data.js","store/actionTypes.js","store/loadData.js","store/actionCreators.js","components/App/index.js","store/reducer.js","store/index.js","index.js"],"names":["PokemonDetails","_ref","currentPokemon","setCurrentPokemon","react_default","a","createElement","className","onClick","src","info","sprites","front_shiny","alt","concat","name","id","types","map","el","type","stats","base_stat","weight","moves","length","Card","pokemon","key","Cards","pokemonsArr","loadMoreData","every","components_Card_Card","Header","updatePokemons","pokemons","active","_useState","useState","_useState2","Object","slicedToArray","currentType","setCurrentType","useEffect","filter","some","Fragment","value","onChange","_ref2","target","disabled","Enhanced","connect","state","App","loadData","loadMore","loadTypes","_useState3","_useState4","setActive","_useState5","_useState6","activeTimeout","setTimeout","toConsumableArray","Dimmer","inverted","Loader","content","components_Cards_Cards","components_PokemonsDetails_PokemonDetails","getData","url","arguments","undefined","fetch","then","response","json","ACTION_TYPES","GET_POKEMONS","GET_POKEMONS_INFO","GET_POKEMONS_TYPES","link","dispatch","loadInfo","pokemonInfo","initialState","store","createStore","action","results","_objectSpread","next","applyMiddleware","thunk","ReactDOM","render","es","App_Enhanced","document","getElementById"],"mappings":"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","file":"static/js/main.57461cc2.chunk.js","sourcesContent":["import React from 'react';\n\nimport './PokemonDetails.scss'\n\nconst PokemonDetails = ({currentPokemon, setCurrentPokemon}) => (\n        <div className=\"right-block\" onClick={() => setCurrentPokemon({})}>\n            <div className=\"pokemon-details\">\n                <img src={currentPokemon.info.sprites.front_shiny} alt=\"pokemon\" />\n                <h1 className=\"title\">{`${currentPokemon.name} #${currentPokemon.info.id}`}</h1>\n                <table className=\"ui compact table\">\n                    <tbody>\n                    <tr>\n                        <td>Type</td>\n                        <td>\n                            {currentPokemon.info.types.map(el => el.type.name + \" \")}\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>Attack</td>\n                        <td>{currentPokemon.info.stats[4].base_stat}</td>\n                    </tr>\n                    <tr>\n                        <td>Defense</td>\n                        <td>{currentPokemon.info.stats[3].base_stat}</td>\n                    </tr>\n                    <tr>\n                        <td>HP</td>\n                        <td>{currentPokemon.info.stats[5].base_stat}</td>\n                    </tr>\n                    <tr>\n                        <td>SP Attack</td>\n                        <td>{currentPokemon.info.stats[2].base_stat}</td>\n                    </tr>\n                    <tr>\n                        <td>SP Defense</td>\n                        <td>{currentPokemon.info.stats[1].base_stat}</td>\n                    </tr>\n                    <tr>\n                        <td>Speed</td>\n                        <td>{currentPokemon.info.stats[0].base_stat}</td>\n                    </tr>\n                    <tr>\n                        <td>Weight</td>\n                        <td>{currentPokemon.info.weight}</td>\n                    </tr>\n                    <tr>\n                        <td>Total moves</td>\n                        <td>{currentPokemon.info.moves.length}</td>\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n\n\nexport default PokemonDetails;\n","import React from 'react';\n\nconst Card = ({pokemon, setCurrentPokemon}) => {\n    return (\n        <div\n            key={pokemon.name}\n            className=\"card\"\n            onClick={() => setCurrentPokemon(pokemon)}\n        >\n            <img src={pokemon.info.sprites.front_shiny} alt=\"pokemon\" />\n            <div className=\"content\">\n                <h1 className=\"header\">{pokemon.name}</h1>\n                {pokemon.info.types.map(type => (\n                    <span\n                        key={type.type.name}\n                        className={`type ${type.type.name}`}\n                    >\n                        {type.type.name}\n                      </span>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Card;\n","import React from 'react';\n\nimport Card from \"../Card/Card\";\n\nimport './Cards.scss'\n\nconst Cards = ({pokemonsArr, setCurrentPokemon, loadMoreData}) => {\n    return (\n        <div className=\"left-block\">\n            <div className=\"ui link cards\">\n                {pokemonsArr.every(pokemon => pokemon.info) &&\n                pokemonsArr.map(pokemon => (\n                    <Card setCurrentPokemon={setCurrentPokemon} pokemon={pokemon}/>\n                    ))}\n            </div>\n            <button onClick={loadMoreData} className=\"ui primary button\">\n                Load More\n            </button>\n        </div>\n    );\n};\n\nexport default Cards;\n","import React, { useEffect, useState } from 'react';\n\nimport './Header.scss'\n\nconst Header = ({types, updatePokemons, pokemons, setCurrentPokemon, active }) => {\n    const [currentType, setCurrentType] = useState(\"\");\n    useEffect(() => {\n        if (currentType) {\n            updatePokemons(\n                pokemons.filter(pokemon =>\n                    pokemon.info.types.some(type => type.type.name === currentType)\n                )\n            );\n        } else  {\n            updatePokemons(pokemons)\n        }\n        setCurrentPokemon({})\n    }, [currentType, pokemons, setCurrentPokemon, updatePokemons]);\n    useEffect(()=>{\n        setCurrentType(\"\");\n    }, [active]);\n    return (\n        <>\n            <h1 className=\"header\">POKEDEX</h1>\n            <div className=\"filter-menu\">\n                <select\n                    value={currentType}\n                    onChange={({ target }) => setCurrentType(target.value)}\n                    className=\"ui selection dropdown\"\n                >\n                    <option value=\"\" disabled>\n                        Choose your type:\n                    </option>\n                    {types.map(type => (\n                        <option value={type.name} key={type.name}>\n                            {type.name}\n                        </option>\n                    ))}\n                </select>\n                <button type=\"reset\" className=\"negative ui button\" onClick={() => setCurrentType('')}>Reset</button>\n            </div>\n        </>\n    );\n};\n\nexport default Header;\n","import { connect } from 'react-redux';\n\nimport Header from './Header';\n\n\nfunction mapState2Props(state) {\n    return {\n        pokemons: state.pokemons,\n        types: state.types,\n    };\n}\nconst Enhanced = connect(\n    mapState2Props,\n)(Header);\n\nexport {\n    Enhanced as Header,\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Dimmer, Loader } from \"semantic-ui-react\";\n\nimport PokemonDetails from \"../PokemonsDetails/PokemonDetails\";\nimport Cards from \"../Cards/Cards\";\nimport {Header} from \"../Header/\";\n\nimport \"./App.scss\";\n\nconst App = ({ loadData, pokemons, loadMore, loadTypes, types }) => {\n  const [currentPokemon, setCurrentPokemon] = useState({});\n  const [active, setActive] = useState(false);\n  const [pokemonsArr, updatePokemons] = useState([]);\n  function activeTimeout() {\n    setActive(true);\n    setTimeout(() => setActive(false), 2000);\n  }\n  function loadMoreData() {\n    activeTimeout();\n    setCurrentPokemon({});\n    loadData(loadMore);\n  }\n  useEffect(() => {\n    activeTimeout();\n    loadData();\n    loadTypes();\n  }, [loadData, loadTypes]);\n\n  useEffect(() => {\n    updatePokemons([...pokemons]);\n  }, [pokemons]);\n\n\n\n  return (\n    <>\n        <Dimmer active={active} inverted>\n            <Loader inverted content=\"Loading\" />\n        </Dimmer>\n      <Header updatePokemons={updatePokemons} setCurrentPokemon={setCurrentPokemon} active={active}/>\n      <main className=\"main-block\">\n          <Cards pokemonsArr={pokemonsArr} setCurrentPokemon={setCurrentPokemon} loadMoreData={loadMoreData}/>\n        {currentPokemon.info && (\n            <PokemonDetails currentPokemon={currentPokemon} setCurrentPokemon={setCurrentPokemon}/>\n            )}\n      </main>\n    </>\n  );\n};\nexport default App;\n","const BASE_URL = 'https://pokeapi.co/api/v2/pokemon/?limit=12';\nexport const getData = (url=BASE_URL) => fetch(`${url}`).then(response => response.json());\n","export const ACTION_TYPES = {\n    GET_POKEMONS: 'GET_POKEMONS',\n    GET_POKEMONS_INFO: 'GET_POKEMONS_INFO',\n    GET_POKEMONS_TYPES: 'GET_POKEMONS_TYPES',\n};\n","import {getData} from \"../api/data\";\nimport {getPreparedPokemonsData, getPreparedPokemonsInfo, getPreparedPokemonsTypes} from \"./actionCreators\";\n\nexport const loadData = (link) => dispatch =>{\n    getData(link)\n        .then(response => {\n            dispatch(getPreparedPokemonsData(response));\n        })\n};\n\nexport const loadInfo = (link) => dispatch =>{\n    getData(link)\n        .then(response => {\n            dispatch(getPreparedPokemonsInfo(response));\n        })\n};\n\nexport const loadTypes = () => dispatch => {\n    getData(\"http://pokeapi.co/api/v2/type\")\n        .then(response => {\n            dispatch(getPreparedPokemonsTypes(response));\n        })\n};\n","import {ACTION_TYPES} from \"./actionTypes\";\n\nexport const getPreparedPokemonsTypes = types => ({\n    type: ACTION_TYPES.GET_POKEMONS_TYPES,\n    types,\n});\n\nexport const getPreparedPokemonsData = pokemons => ({\n    type: ACTION_TYPES.GET_POKEMONS,\n    pokemons,\n});\n\n export const getPreparedPokemonsInfo = pokemonInfo => ({\n    type: ACTION_TYPES.GET_POKEMONS_INFO,\n    pokemonInfo,\n});\n","import { connect } from 'react-redux';\nimport App from './App';\nimport {loadData, loadTypes} from \"../../store/loadData\";\n\nconst mapDispatch2Props = dispatch => ({\n    loadData: (link) => dispatch(loadData(link)),\n    loadTypes: () => dispatch(loadTypes()),\n});\n\nfunction mapState2Props(state) {\n    return {\n        pokemons: state.pokemons,\n        loadMore: state.loadMore,\n        types: state.types,\n    };\n}\nconst Enhanced = connect(\n    mapState2Props,\n    mapDispatch2Props,\n)(App);\n\nexport {\n    Enhanced as App,\n};\n","import {store} from \"./index\";\nimport {ACTION_TYPES} from \"./actionTypes\";\nimport {loadInfo} from \"./loadData\";\n\nconst initialState = {\n    pokemons:[],\n    types: [],\n};\n\n export function reducer(state = initialState, action = {}) {\n    switch (action.type) {\n        case ACTION_TYPES.GET_POKEMONS: {\n            action.pokemons.results.map(pokemon => loadInfo(pokemon.url)(store.dispatch));\n            return {\n                ...state,\n                pokemons: [...state.pokemons, ...action.pokemons.results],\n                loadMore: action.pokemons.next,\n            };\n        }\n        case ACTION_TYPES.GET_POKEMONS_INFO: {\n            return {\n                ...state,\n                pokemons: state.pokemons.map((pokemon) =>{\n                    if(pokemon.name === action.pokemonInfo.name){\n                        return ({\n                            ...pokemon,\n                            info: action.pokemonInfo,\n                        });\n                    } else {\n                        return (pokemon)\n                    }\n                }),\n            }\n        }\n        case ACTION_TYPES.GET_POKEMONS_TYPES: {\n            return {\n                ...state,\n                types: action.types.results\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport {reducer} from \"./reducer\";\n\n\nexport const store = createStore(reducer, applyMiddleware(thunk));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './components/App';\n\nimport { store } from './store/index';\n\nReactDOM.render(\n<Provider store={store}>\n    <App />\n    </Provider>,\ndocument.getElementById('root')\n);\n"],"sourceRoot":""}